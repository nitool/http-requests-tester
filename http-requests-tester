#!/usr/bin/env node
const { format } = require('util')
const fs = require('fs')
const readline = require('readline')
const { parseOptions, showHelpMessage } = require('./src/options')
const { TestPipeline } = require('./src/tester')
const { Parser } = require('./src/parser')
const options = parseOptions(process.argv.slice(2))

if (options['test-file'].length === 0) {
    process.stdout.write('No .http test file selected.\n\n')
    showHelpMessage(2)
}

const client = JSON.parse(fs.readFileSync(options['client-file'], {
    encoding: 'utf-8'
}))[options['selected-client']]

if (typeof client === 'undefined') {
    process.stdout.write('Invalid client file or client not selected.\n\n')
    showHelpMessage(3)
}

const processLineByLine = async () => {
    const pipeline = new TestPipeline(client, options)
    const parser = new Parser(pipeline)
    for (const key in options['test-file']) {
        if (!options['test-file'].hasOwnProperty(key)) {
            continue
        }

        const filename = options['test-file'][key]
        pipeline.initialPromise.then(resolve => {
            process.stdout.write(format('Running tests for %s file.\n\n', filename))
            return new Promise(resolve => resolve())
        })

        const rl = readline.createInterface({
            input: fs.createReadStream(filename),
            crlfDelay: Infinity
        })


        for await (const line of rl) {
            parser.processLine(line)
        }

        parser.onClose()
        if (parseInt(key) === options['test-file'].length - 1) {
            pipeline.finish()
        } else {
            pipeline.startNewTest()
        }
    }
}

(() => processLineByLine())()

// todo: zapisać response z każdego wykonanego requestu do jakiegoś tmp

