#!/usr/bin/env node
const { format } = require('util')
const fs = require('fs')
const readline = require('readline')
const { parseOptions, showHelpMessage } = require('./src/options')
const { TestPipeline } = require('./src/tester')
const { Parser } = require('./src/parser')
const { Readable } = require('node:stream')
const options = parseOptions(process.argv.slice(2))

const client = JSON.parse(fs.readFileSync(options['client-file'], {
    encoding: 'utf-8'
}))[options['selected-client']]

if (typeof client === 'undefined') {
    process.stdout.write('Invalid client file or client not selected.\n\n')
    showHelpMessage(3)
}

const readStdin = () => {
    return new Promise((resolve, reject) => {
        if (process.stdin.isTTY) {
            resolve('')
        }

        let data = ''
        process.stdin.on('readable', () => {
            let chunk
            while ((chunk = process.stdin.read()) !== null) {
                data += chunk + '\n'
            }
        })

        process.stdin.on('end', () => {
            resolve(data)
        })
    })
}

const processLineByLine = async () => {
    const stdinTests = await readStdin()
    if (options['test-file'].length === 0 && stdinTests.length === 0) {
        process.stdout.write('No .http test file selected.\n\n')
        showHelpMessage(2)
    }

    if (stdinTests.length > 0) {
        options['test-file'].push('stdin')
    }

    const pipeline = new TestPipeline(client, options)
    const parser = new Parser(pipeline)
    for (const key in options['test-file']) {
        if (!options['test-file'].hasOwnProperty(key)) {
            continue
        }

        const filename = options['test-file'][key]
        parser.setSubject(filename)
        pipeline.initialPromise.then((context) => {
            if (filename === 'stdin') {
                process.stdout.write(format('Running tests for %s.\n\n', filename))
            } else {
                process.stdout.write(format('Running tests for %s file.\n\n', filename))
            }

            return new Promise(resolve => resolve(context))
        })

        let rl
        if (filename === 'stdin') {
            rl = readline.createInterface({
                input: Readable.from(Buffer.from(stdinTests)),
                crlfDelay: Infinity
            })
        } else {
            rl = readline.createInterface({
                input: fs.createReadStream(filename),
                crlfDelay: Infinity
            })
        }

        for await (const line of rl) {
            parser.processLine(line)
        }

        parser.onClose()
        if (parseInt(key) === options['test-file'].length - 1) {
            pipeline.finish()
        } else {
            pipeline.startNewTest()
        }
    }
}

(() => processLineByLine())()

