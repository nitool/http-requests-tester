POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "test": 400
}

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

< tests/functional/test_case_with_body_from_file.json

> {%
    client.global.set('flow_test_1', response.body.json.test)
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/{{ flow_test_1 }}
Accept: text/plain

> {%
    client.test('rzeczywisty test, sprawdzam czy wartość została przekazana', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

###

POST http://{{host}}/anything/{anything}
Accept: application/json

{
    "uuid": "{{ $uuid }}",
    "timestamp": {{ $timestamp }},
    "randomInt": {{ $randomInt }}
}

> {%
    client.global.set('uuid_to_test', response.body.json.uuid)
    client.global.set('timestamp_to_test', response.body.json.timestamp)
    client.global.set('random_int_to_test', response.body.json.randomInt)
    client.test('powinno zwrócić to 3 razy dla 3 różnych asercji', function () {
        client.assert(false, 'testuję zmienną ' + client.global.get('uuid_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('timestamp_to_test'))
        client.assert(false, 'testuję zmienną ' + client.global.get('random_int_to_test'))
    })
%}

###

POST http://{{host}}/status/400
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

DELETE http://{{host}}/status/200
Accept: application/json

> tests/functional/test_case_with_external_script.js

###

GET http://{{host}}/get
Accept: application/json

> {%
    client.test('rzeczywisty test, ma zwracać 200', function () {
        client.assert(response.status === 200, 'kod nie jest 200')
    })
%}

###

POST http://{{host}}/status/500
Accept: text/plain

> {%
    client.test('rzeczywisty test, ma zwracać 500', function () {
        client.assert(response.status === 500, 'kod nie jest 500')
    })
%}

###

POST http://{{host}}/status/200
Accept: text/plain

> {%
    client.test('rzeczywisty test, niby ma zwacać 400, ale zwraca 200, ma się wywalić', function () {
        client.assert(response.status === 400, 'kod nie jest 400')
    })
%}

